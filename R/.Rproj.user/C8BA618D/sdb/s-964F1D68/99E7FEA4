{
    "contents" : "\\name{NONR}\n\\alias{NONR}\n\\alias{NONR72}\n\\title{Run NONMEM}\n\\description{\n\\code{NONR} executes, from R, a NONMEM run for which there exists a compatible (see note)\n  control stream. Supported platforms include MS Windows and \n  Unix-like operating systems (Nix).  Special support is included for Sun Grid\n  Engine with Nix.  Generally, NONMEM needs to be installed using NMQual\n  (http://nmqual.googlecode.com).  Execution on the Nix grid requires\n  the installation of Sun Grid Engine v6.  Following a successful NONMEM\n  run \\code{NONR} can call \\code{PLOTR} to create diagnostic plots (pdf format) and/or\n  run a user-written script. \\code{NONR72} is a wrapper designed to invoke an \n  NMQual-mediated installation of NONMEM 7.2.0 or above.  See \\code{\\link{autolog.pl}}.\n}\n\\usage{\nNONR(\n\trun, \n\tcommand, \n\tproject = getwd(), \n\tboot = FALSE,\n\tgrid = boot, \n\tconcurrent = grid,\n\turgent = !boot,\n\tudef= FALSE, \n\tinvisible=udef,\n\tcompile = TRUE,\n\texecute = TRUE,\n\tsplit = grid & compile & execute,\n\tcheckrunno = TRUE, \n\tchecksum = TRUE, \n\tdiag = !boot, \n\tfdata = TRUE, \n\tlogtrans = FALSE,\n\tnice= TRUE, \n\tepilog = NULL, \n\tdvname = NULL, \n\tgrp = NULL, \n\tgrpnames = NULL, \n\tcont.cov = NULL, \n\tcat.cov = NULL, \n\tpar.list = NULL, \n\teta.list = NULL, \n\tmissing = -99, \n\tdelay = 0,\n\t...\n)\nNONR72(\n\trun, \n\tcommand, \n\tproject = getwd(), \n\tboot = FALSE,\n\tgrid = boot, \n\tconcurrent = grid,\n\turgent = !boot,\n\tudef= FALSE, \n\tinvisible=udef,\n\tcompile = TRUE,\n\texecute = TRUE,\n\tsplit = FALSE,\n\tcheckrunno = TRUE, \n\tchecksum = TRUE, \n\tdiag = !boot, \n\tfdata = TRUE, \n\tlogtrans = FALSE,\n\tnice= TRUE, \n\tepilog = NULL, \n\tdvname = NULL, \n\tgrp = NULL, \n\tgrpnames = NULL, \n\tcont.cov = NULL, \n\tcat.cov = NULL, \n\tpar.list = NULL, \n\teta.list = NULL, \n\tmissing = -99, \n\tdelay = 0,\n\t...,\n\tinterface='autolog.pl',\n\tq='all.q'\n)\n}\n\n\\arguments{\n\n  \\item{run}{\n  vector of control stream names.  Typically integer.\n  e.g. 1:10 corresponds to 1.ctl, 2.ctl, ... 10.ctl.\n } \n\n  \\item{command}{\n  path for a script to run NONMEM, e.g., \n  \\code{command='C:/nm6/test/nm6.pl'}.  The script is assumed to be an NMQual-generated\n  wrapper for NONMEM execution, but may also be arbitrarily defined by the user\n  (\\code{udef=TRUE}).  In the former case, appropriate arguments and modifiers are added\n  to build a typical NMQual commandline (\\code{nm.pl} or \\code{autolog.pl}), conditionally wrapped in the arguments for\n  a typical grid commandline (\\code{qsub}).  The path may be given relative to the \n  current directory.  \\code{command} may be a character vector of length greater than one: \n  each element will be run in succession.\n  \n  If \\code{command} is missing, an attempt will be made to locate a NONMEM installation \n  using \\code{\\link{findNonmemCommand}} (as of package version 5.15).  DISCLAIMER: it is the responsibility\n  of the user to ensure that the command thus-identified is appropriate.\n } \n\n  \\item{project}{\n  directory in which run-specific subdirectories will be created. \n  Typically also contains original control streams.\n  Use an absolute path (safer) or specify relative to the current working directory.\n }\n\n  \\item{boot}{\n  \t  If \\code{TRUE}, autogenerated run directories will end in \\file{.boot}.  If \n  \\code{grid} is also \\code{TRUE}, The job will run asynchronously and no\n  cleanup or plotting will be attempted.  Default: \\code{FALSE}.\n } \n  \n  \\item{grid}{\n  whether NONMEM execution should be wrapped in a call to Sun Grid Engine's \n  \\code{qsub} utility.  \\code{TRUE} if \\code{boot} is \\code{TRUE}, by default.  Set to \\code{TRUE}\n  explicitly for regular runs using a grid.  Coerced to \\code{FALSE} for Windows.  \n  Autogenerated run directories will end in \\file{.lock} until run is complete.}\n  \n  \\item{concurrent}{\n  Should the runs represented by elements of \\code{run} be run \n  concurrently as separate processes?  \\code{TRUE} if \\code{grid} is \\code{TRUE},\n  by default, since this is the primary advantage of using a grid.\n  Coerced to \\code{FALSE} on Windows.  Concurrency is implemented using the package \\pkg{fork}.\n }\n  \n  \\item{urgent}{\n  Should jobs use as many resources as possible?  Only meaningful\n  in the grid environment, where all available processors will be \n  used if urgent, and a limited number of processors if not.  In\n  practice, this dissolves to a choice between \\code{q='all.q'} and \n  \\code{q='bootstrap.q'}.  Passing \\code{q} explicitly will override this choice.\n }\n\n  \\item{udef}{a logical indicating whether \\code{command} is user defined.  If so, the \n  \\code{command} is simply wrapped in a system call rather than pre-converted to a \n  (possibly grid-ready) NMQual commandline. Default: \\code{FALSE}} \n  \n  \\item{invisible}{\\code{intern}, \\code{minimized}, and \\code{invisible} \n  \t  can be specified for the system call that runs NONMEM.  \\pkg{metrumrg}\n  will largely ignore these on a unix-like platform.  For Windows, \\code{invisible} is\n  \\code{TRUE} by default when \\code{udef} is \\code{TRUE}, and \\code{FALSE} otherwise.  If \\code{FALSE}, \n  NONMEM output will be displayed in a command window during the run.  Set \n  \\code{invisible=TRUE} to suppress this display.  See the Windows help for\n  \\code{system}.  To explore interactively, use \\code{debug(runCommand)}.} \n\n  \\item{compile}{whether to compile NONMEM (i.e., make nonmem.exe).  Set to \\code{FALSE}\n  if you already did this in a previous step and merely want to execute.}\n\n  \\item{execute}{whether to execute the compiled NONMEM (i.e., invoke nonmem.exe).\n  Set to \\code{FALSE} if you merely want to compile, e.g. to verify compile success without\n  committing to a run.  You can run the compiled object later with \\code{compile=FALSE}.}\n\n  \\item{split}{whether to compile and execute as separate steps.  If both\n  compile and execute are \\code{TRUE}, the run can be split into two separate steps (this \n  is the default if grid is \\code{TRUE}.  Though \\code{split}, \\code{compile}, and \n  \\code{execute} can be manipulated independently, it makes no sense to split a run\n  unless \\code{compile} and \\code{execute} are both \\code{TRUE}.  The greatest advantage\n  to splitting is realized on a grid, with \\code{grid=TRUE}: runs will be split\n  and compile steps will by default be run in their own queue, for efficiency.}\n\n  \\item{checkrunno}{whether to check/correct the control stream to\n  ensure that standard uses of the NONMEM control stream name match the\n  name listed in \\code{run} vector. Default: \\code{TRUE}.  For files, e.g.\n  \\code{../3.TAB}, path separator  must be that recognized by \\code{dirname} and \\code{basename}.\n  Only one usage per line of text will be fixed.\n  \n  \\sQuote{Standard} uses currently include:  the first word after \\$PROB(LEM) (not \n  counting RUN or RUN\\#); \\file{*.tab} (case insensitive); \\file{*par.tab} (case insensitive);\n  \\file{*.msf} (case insensitive) except on a line that starts with \\$MSFI.  \n }  \n  \n  \\item{checksum}{If \\code{TRUE} (default), checksums are requested from \\code{nm.pl} when \n  wrapping NONMEM execution.  \\code{FALSE} is useful for development.} \n\n  \\item{diag}{whether to plot standard diagnostic plots. Default: \\code{TRUE} for \n  non-bootstrap runs. You can override the default file name by passing \n  \\code{plotfile}.  See \\code{PLOTR} for details.}\n \n  \\item{fdata}{whether to attempt deletion of NONMEM files FDATA and\n  PRDERR. Default: \\code{TRUE}.}  \n  \n  \\item{logtrans}{passed to PLOTR}     \n\n  \\item{nice}{whether the NONMEM run directory, based on \\code{run}, is\n  deleted or simply emptied prior to the execution of NONMEM. If\n  \\code{nice=TRUE} (default), hidden files (as defined for \\code{all.files} in \n  the function \\code{dir}) are not deleted, e.g., any \\code{.svn} directory.} \n\n  \\item{epilog}{\n  user-defined function or script to call at end of NONR or PLOTR.\n  A non-null argument that cannot be coerced by \\code{match.fun} to a function\n  will be treated as a filename to be sourced.  All the arguments normally\n  available to \\code{PLOTR} (\\code{run, project, dvname, logtrans, grp, grpnames, cont.cov, \n  at.cov, par.list, eta.list, missing}, etc) will be available to \\code{epilog}, as well\n  as any extra arguments you pass to \\code{NONR} or \\code{PLOTR}. A\n  function can declare any of these, but should at minimum contain the \n  \\dots argument. A script can expect them to be present.  See also \n  \\file{inst/example/epilog.R} in this package.  To see exactly what is available,\n  try \\code{epilog=function(...)cat(names(list(...)))}.\n }  \n  \n  \\item{dvname}{name of the dependent variable to use as a label for the diagnostic plots. Default: DV.}\n  \n  \\item{grp}{passed to \\code{PLOTR}} \n  \\item{grpnames}{passed to \\code{PLOTR}}\n  \\item{cont.cov}{passed to \\code{PLOTR}}\n  \\item{cat.cov}{passed to \\code{PLOTR}} \n  \\item{par.list}{passed to \\code{PLOTR}}\n  \\item{eta.list}{passed to \\code{PLOTR}}\n  \\item{missing}{passed to \\code{PLOTR}}\n  \\item{delay}{time (msec) to wait before starting each run}\n  \\item{interface}{the name of a function to prepare NONMEM command lines}\n  \\item{q}{choice of queue, passed to \\code{qsub}}\n  \\item{\\dots}{additional arguments passed to functions that accept them. For example,\n  you can pass \\code{onefile=FALSE} to \\code{pdf}, called by \\code{PLOTR}.  You can also pass\n  additional lattice arguments to modify the diagnostic plots.  \n  \n  Flags recognized\n  by Sun Grid Engine's \\code{qsub} are accepted by a like-named wrapper (this effect replaces\n  the older SGEflgs argument).  Example: to set a maximum run length of one hour and get an email \n  if the run goes over one hour and is killed, include \\code{l='h_rt=1:0:0',\n  m='e',M='name@email.address'}. Passing N, o, e, V, j, q, sync, shell, b, or cwd\n  will override defaults.  You can pass multiple instances of an argument if \\code{qsub} \n  allows it.  passing L will override a constitutive instance of l in \\code{runCommand}.\n  Values are character vectors.  Lengths greater than one result in element-wise\n  paste operations: a vector of corresponding length will be returned.}\n  \n}\n\\details{\n\t\\code{NONR} is currently implemented as a wrapper that calls \\code{runNonmem} for each\nelement in \\code{run}.  By default, it creates a like-named subdirectory for each\nrun in \\code{project}, attaching an appropriate extension if necessary (\\file{.boot} for \nbootstrap runs, \\file{.lock} for grid runs). It looks for \\code{<run>.ctl} in \\code{project},\ncleans it up as necessary, and writes it to the subdirectory, in which context\nNONMEM is invoked (using \\code{runCommand}).  The output of NONMEM will be \n\\file{<run>.lst} in the subdirectory.  Files matching patterns in \\code{runNonmem:remove} will\nbe removed.  A \\file{*.lock} directory, if any, will be converted to \\sQuote{*}.  Attempts \nwill be made to run \\code{PLOTR} and \\code{epilog}.  Then a \\sQuote{complete} message is printed.\n\nFile names and locations can be manipulated somewhat, i.e., by over-riding\n\\code{runNonmem}'s defaults for \\code{runext}, \\code{rundir}, \\code{outfile}, \\code{streams}, \n\\code{ctlfile}, and \\code{remove}.\n}\n\n\\value{used for side effects}\n\\note{\n  Specific control stream syntax is expected\n  when running \\code{NONR} and the other functions present in the \\pkg{metrumrg} package.\n  The list of syntax requirements are as follows.\n  \\itemize{\n \n  \t  \\item \\$PROB should be followed by \\sQuote{RUN\\#} then a number representing \n  the control stream number. No commas should be used in the \\$PROB statement.\n  \\sQuote{PROBLEM} is an alternative for \\sQuote{PROB}.  The run number is the first space-delimited\n  alphanumeric sequence after PROB(LEM), ignoring RUN(\\#).  \n\n  \\item The datafile name and relative path needs to be on the first line of the\n  \\$DATA record immediately following \\sQuote{\\$DATA}.\n  \n  \\item A relative datafile path must be specified relative to \\code{runNonmem:rundir}, typically a subdirectory\n  of \\code{project}.  For example, \\file{3.ctl} will actually run as \\file{path/project/3/3.ctl}; if\n  its datafile is \\file{path/data/DATA3}, then 3.ctl should specify \n  \\dQuote{\\$DATA ../../data/DATA3}.\n  \n  \\item The NONMEM datafile must contain a \\sQuote{C} column\n  containing only C's or periods(\\sQuote{.}).  Typically this is the first column.\n  \n  \\item The \\file{*.TAB} file in the \\dQuote{\\$TABLE}\n  step must contain an EVID column for plotting purposes. In the case\n  of \\dQuote{\\$PRED} models, this can be a dummy column in the data file.\n  \n  \\item The NONMEM data file must contain a column with a header of \\sQuote{ID} for\n  plotting purposes.\n  \n  \\item File paths for \\file{MSF} files and \\file{TAB} files, etc., are generally expected to \n  be relative paths, using \\sQuote{/} as the directory separator.  File paths with no\n  separator are assumed to be relative to the directory in which the control\n  stream is run: \\sQuote{./} may be prepended.  E.g. \\dQuote{$TABLE EVID FILE=100.tab} is taken\n  as \\dQuote{$TABLE EVID FILE=./100.tab}.\n }\n\n  \\code{PLOTR} will automatically generate CWRES plots if required files are\n present in NONMEM run directory. See help for \\code{compute.cwres} for\n instructions on generating the files required for CWRES plots.  \\code{PLOTR}\n expects etas and model parameters to be output in the \\file{*par.TAB} file and\n variables for diagnostic plots to be output in the \\file{*.TAB} file, where\n \\sQuote{*} represents the control stream number.  Additional \\$TABLE records\n can be present in the control stream but these are not used/needed by\n \\code{PLOTR}.  Mechanisms and expectations are somewhat different for NONMEM7.\n}\n\n \\references{\\url{http://metrumrg.googlecode.com}}\n \\author{written by Bill Knebel; modified by Tim Bergsma.}\n\\seealso{\n\t\\itemize{\n\t\t\\item \\code{\\link{runNonmem}}\n\t\t\\item \\code{\\link{PLOTR}}\n\t}\n}\n\\examples{\nmetrumrgURL('example/project/script/model.pdf')\n}\n\\keyword{manip}\n\n",
    "created" : 1336086763671.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "hash" : "187780370",
    "id" : "99E7FEA4",
    "lastKnownWriteTime" : 1335368933,
    "path" : "~/project/metrumrg/man/NONR.Rd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_doc"
}