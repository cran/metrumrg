{
    "contents" : "\\name{helpList} \n\\alias{helpList} \n\\docType{package} \n\\title{metrumrg: Defined Functions}\n\\description{Exhaustive list of functions defined by \\pkg{metrumrg}.}\n\\details{\n\\link[=metrumrg]{metrumrg}\n\n\\itemize{\n\\item \\link{$.init} select init element\n\\item \\link{$<-.init} assign init element\n\\item \\link{[.initList} subset initList\n\\item \\link{[.comment} subset a comment\n\\item \\link{[.conditioned} subset a conditioned object\n\\item \\link{[.digest} subset a digest object\n\\item \\link{[.flag} subset a flag\n\\item \\link{[.keyed} subset a keyed data frame\n\\item \\link{[.nmctl} subset a control stream object\n\\item \\link{[.temporal} subset a temporal object\n\\item \\link{[[.comment} select element from a comment\n\\item \\link{[[.flag} select element from a flag\n\\item \\link{[[.nmctl} select element from a control stream object\n\\item \\link{[[.temporal} select element from a temporal object\n\\item \\link{[<-.temporal} assign to a temporal object\n\\item \\link{\\%contains\\%} test whether x contains y\n\\item \\link{\\%nested.in\\%} test whether a is nested in b\n\\item \\link{\\%nests\\%} test whether a nests b\n\\item \\link{accept} document the acceptance of an R installation\n\\item \\link{acceptance} display the acceptance documentation for an R installation\n\\item \\link{acr} calculate accumulation ratio\n\\item \\link{addl.data.frame} collapse dose records by means of ADDL notation\n\\item \\link{addl.default} calculate the ADDL data item (NONMEM) from explicit dose records\n\\item \\link{addl} calculate addl\n\\item \\link{after} test whether elements occur after some condition is \\code{TRUE}\n\\item \\link{aggregate.keyed} aggregate a keyed data frame\n\\item \\link{align.decimal} align numeric column in latex table on the decimal\n\\item \\link{and.keyed} produce inner join of two keyed data frames\n\\item \\link{as.best.data.frame} coerce a data.frame to unambigous numeric or character columns\n\\item \\link{as.best.default} coerce a vector unambiguously to numeric or character\n\\item \\link{as.best.digest} coerce a digest to unambiguous numeric or character\n\\item \\link{as.best} generic\n\\item \\link{as.character.comment} convert comment to character\n\\item \\link{as.character.flag} convert flag to character\n\\item \\link{as.character.init} convert init to character\n\\item \\link{as.character.initList} convert initList to character\n\\item \\link{as.character.nmctl} convert nmctl to character\n\\item \\link{as.character.temporal} convert temporal to character\n\\item \\link{as.chartime.numeric} convert numeric to time\n\\item \\link{as.chartime} convert to time (generic, internal)\n\\item \\link{as.comment.comment} convert comment to comment\n\\item \\link{as.comment.default} convert default to comment\n\\item \\link{as.comment} convert to comment\n\\item \\link{as.conditioned.digest} convert a digest to conditioned\n\\item \\link{as.conditioned.isolated} convert isolated to conditioned\n\\item \\link{as.conditioned.keyed} convert keyed to conditioned\n\\item \\link{as.conditioned} split a data frame per levels of conditioning variables\n\\item \\link{as.csv.filename.character} convert character to csv.filename \n\\item \\link{as.csv.filename} convert to csv.filename\n\\item \\link{as.data.frame.block} convert a block of lines to data frame\n\\item \\link{as.data.frame.comment} convert comment to data frame\n\\item \\link{as.data.frame.flag} convert flag to data frame\n\\item \\link{as.digest.data.frame} convert data.frame to digest\n\\item \\link{as.digest.digest} convert digest to digest\n\\item \\link{as.digest.keyed} convert keyed to digest\n\\item \\link{as.digest.nm} convert nm to digest\n\\item \\link{as.digest} resolve static components of an object hierarchy\n\\item \\link{as.document.character} convert tex fragments to latex document\n\\item \\link{as.document.data.frame} convert data.frame to latex document\n\\item \\link{as.document} convert to latex document\n\\item \\link{as.file.runlog} convert to convert runlog to file\n\\item \\link{as.filename.character} convert character to filename\n\\item \\link{as.filename} convert to filename\n\\item \\link{as.flag.default} convert default to flag\n\\item \\link{as.flag.flag} convert flag to flag\n\\item \\link{as.flag} convert to flag\n\\item \\link{as.halfmatrix.default} convert a vector to halfmatrix\n\\item \\link{as.halfmatrix.halfmatrix} preserve halfmatrix\n\\item \\link{as.halfmatrix} generic\n\\item \\link{as.init} convert to init\n\\item \\link{as.init.init} convert init to init\n\\item \\link{as.init.numeric} convert numeric to init\n\\item \\link{as.initList} convert to initList (generic)\n\\item \\link{as.initList.character} convert character to initList\n\\item \\link{as.initList.list} convert list (of init) to initList\n\\item \\link{as.initList.numeric} convert numeric to initList\n\\item \\link{as.isolated.digest} convert digest to isolated\n\\item \\link{as.isolated.isolated} convert isolated to isolated\n\\item \\link{as.isolated.keyed} convert keyed to isolated\n\\item \\link{as.isolated} split a data frame column-wise into members with only one non-key column\n\\item \\link{as.keyed.data.frame} convert data frame to keyed\n\\item \\link{as.keyed.nm} convert nm to isolated\n\\item \\link{as.keyed} convert to keyed\n\\item \\link{as.list.nmctl} convert nmctl to list\n\\item \\link{as.matrix.halfmatrix} convert a vector to a symmetric matrix\n\\item \\link{as.mDate.character} convert character to mDate\n\\item \\link{as.mDate.Date} convert Date to mDate\n\\item \\link{as.mDate.dates} convert dates (chron) to mDate\n\\item \\link{as.mDate.mDate} convert mDate to mDate\n\\item \\link{as.mDate.numeric} convert numeric to mDate\n\\item \\link{as.mDate.sasdate} convert SAS date to mDate\n\\item \\link{as.mDate} convert to mDate\n\\item \\link{as.mDateTime.character} convert character to mDateTime\n\\item \\link{as.mDateTime.chron} convert chron to mDateTime\n\\item \\link{as.mDateTime.mDate} convert mDate to mDateTime\n\\item \\link{as.mDateTime.mDateTime} convert mDateTime to mDateTime\n\\item \\link{as.mDateTime.numeric} convert numeric to mDateTime\n\\item \\link{as.mDateTime.POSIXct} convert POSIXct to mDateTime\n\\item \\link{as.mDateTime.POSIXlt} convert POSIXlt to mDateTime\n\\item \\link{as.mDateTime} convert to mDateTime\n\\item \\link{as.moot} convert to moot\n\\item \\link{as.motif.digest} create motif for digest\n\\item \\link{as.motif.keyed} create motif for keyed\n\\item \\link{as.motif.motif} create motif from motif\n\\item \\link{as.motif.nm} create motif for nm\n\\item \\link{as.motif} create default motif for various objects\n\\item \\link{as.mTime.character} convert character to mTime\n\\item \\link{as.mTime.mTime} convert mTime to mTime\n\\item \\link{as.mTime.numeric} convert numeric to mTime\n\\item \\link{as.mTime.times} convert times (chron) to mTime\n\\item \\link{as.mTime} convert to mTime\n\\item \\link{as.nm.data.frame} convert data frame to nm\n\\item \\link{as.nm} convert to nm (NMTRAN-ready NONMEM data set)\n\\item \\link{as.nmctl.character} convert character to nmctl\n\\item \\link{as.nmctl} convert to nmctl\n\\item \\link{as.numeric.chartime} convert chartime to numeric\n\\item \\link{as.pdf.character} convert tex fragments to pdf\n\\item \\link{as.pdf.data.frame} convert data.frame to pdf\n\\item \\link{as.pdf.document} convert latex document to pdf\n\\item \\link{as.pdf} convert to pdf\n\\item \\link{as.pxml.ext} convert a param file to XML\n\\item \\link{as.rigged} convert to rigged\n\\item \\link{as.roles.digest} create roles for digest\n\\item \\link{as.roles.keyed} create roles for keyed\n\\item \\link{as.roles} create default roles for parts of objects\n\\item \\link{as.runlog.file} convert file to runlog\n\\item \\link{as.runlog.unilog} convert unilog to runlog\n\\item \\link{as.tabular} convert to a latex tabular environment\n\\item \\link{as.unilog.lst} convert nonmem output (.lst) to unilog\n\\item \\link{as.unilog.pxml} convert nonmem output (.ext) to unilog\n\\item \\link{as.unilog.run} convert run to unilog\n\\item \\link{as.unilog.runlog} convert runlog to unilog\n\\item \\link{as.xml.character} convert character to XML\n\\item \\link{as.xml.data.frame} convert data.frame to XML\n\\item \\link{as.xml.default} convert arbitrary object to XML\n\\item \\link{as.xml} convert object to XML\n\\item \\link{at} test whether elements occur where some condition is \\code{TRUE}\n\\item \\link{attribute} encode an attribute for an XML open tag\n\\item \\link{auc} calculate area under the curve\n\\item \\link{AUC} calculate the area under the curve for each subject over the time interval for dv using the trapezoidal rule\n\\item \\link{aug} add named elements to an object\n\\item \\link{autolog.pl} prepare command lines for autolog.pl.\n\\item \\link{backtrans} backtransform cols in x, returning x\n\\item \\link{badAmt.nm} AMT is NA where EVID is 1\n\\item \\link{badAmt} generic\n\\item \\link{badDv.nm} DV is NA where EVID is 0\n\\item \\link{badDv} generic\n\\item \\link{badII.nm} II is greater than 0 where ADDL is NA or 0 (unless SS > 0)\n\\item \\link{badII} generic\n\\item \\link{bakfor} impute NAs using last observation carried forward after next observation carried backward\n\\item \\link{before} test whether elements occur before some condition is \\code{TRUE}\n\\item \\link{bin} calculate bin limits for x and place each value in a bin, returning the number of values in each bin\n\\item \\link{bmi} calculate body mass index\n\\item \\link{bounds} calculate normal quantiles at bounding probabilities\n\\item \\link{bracket} create an XML tag\n\\item \\link{breaks} calculate breaks between grouped elements\n\\item \\link{bsa} calculate body surface area\n\\item \\link{c.comment} combine comment\n\\item \\link{c.flag} combine flag\n\\item \\link{c.temporal} combine temporal\n\\item \\link{cavg} calculate average concentration\n\\item \\link{check.subjects} check for missing data, numeric data, ranges, etc.\n\\item \\link{clear} drop regular patterns from a character vector\n\\item \\link{CLNR} delete files and directories and log what was deleted to a text file in the project\n\\item \\link{closers} set closing positions for wikmath nests\n\\item \\link{cmax} calculate maximum steady-state concentration\n\\item \\link{cmin} calculate minimum steady-state concentration\n\\item \\link{colname<-} change identified column names\n\\item \\link{command} generate a latex command\n\\item \\link{compileflag} calculate compiler flag for qsub\n\\item \\link{compiler} extract compiler specification from configuration file\n\\item \\link{compute.cwres} compute conditional weighted residuals\n\\item \\link{config} calculate path to configuration file\n\\item \\link{constant.default} test whether values of x are contant within an index\n\\item \\link{constant} generic\n\\item \\link{contains} test a character vector for occurences of a pattern\n\\item \\link{covariatePlots} create diagnostic plots for covariates\n\\item \\link{crcl} calculate creatinine clearance\n\\item \\link{crosses} test whether a crosses b\n\\item \\link{css} calculate steady-state concentration\n\\item \\link{ctl2xml} isolate xml comments from a control stream\n\\item \\link{cvLognormal} calculate coefficient of variation for log-normal data\n\\item \\link{cvNormal} calculate coefficient of variation for normal data\n\\item \\link{cwresPlots} create conditional weighted residual diagnostic plots\n\\item \\link{dataFormat} combine NONMEM predictions, parameter estimates, and covariates into a standard format\n\\item \\link{dataSynthesis} build a standard plotting data set for a given NONR run\n\\item \\link{deranged.data.frame} instantiate records implied by range data\n\\item \\link{deranged.keyed} instantiate records implied by range data\n\\item \\link{deranged} generic\n\\item \\link{diagnosticPlots} create standard diagnostic plots\n\\item \\link{digest} alias for as.digest\n\\item \\link{distance} calculate element positions relative to the \\eqn{n^{th}}{n^th} \\code{TRUE} element positions (usually, within levels of an index)\n\\item \\link{dupKeys.default} give a logical index to duplicated rows of a keyed data frame, AND the rows of which they are duplicates\n\\item \\link{dupKeys.nm} default behavior, after stripping comments\n\\item \\link{dupKeys} generic\n\\item \\link{dynamic.data.frame} return the dynamic portion of a data frame\n\\item \\link{dynamic.keyed} return the dynamic portion of a keyed data frame\n\\item \\link{dynamic} generic\n\\item \\link{electronicAppendix} create an FDA-style electronic appendix from a subversioned directory\n\\item \\link{episcript} run a script in an environment that defines the passed arguments\n\\item \\link{explicitPath} add separators to control stream paths that have none\n\\item \\link{extfile} extract arbitrary file specification from a control stream\n\\item \\link{extractPath} isolate file path from surrounding text (MSF, TAB files).\n\\item \\link{f} alias for as.flag\n\\item \\link{falseAmt.nm} AMT defined where EVID is not 1\n\\item \\link{falseAmt} generic\n\\item \\link{falseDv.nm} DV is defined where EVID is not 0\n\\item \\link{falseDv} generic\n\\item \\link{filename} generate standard file name (internal)\n\\item \\link{findNonmemCommand} find available NONMEM executables\n\\item \\link{first} repeat, for each element, the first element where a condition is \\code{TRUE} (usually, within levels of an index)\n\\item \\link{fixed} find out if something is fixed (generic)\n\\item \\link{fixed.init} find out if an init is fixed\n\\item \\link{fixed.initList} find out if elements of an initList are fixed\n\\item \\link{fixed<-} set the value of 'fixed'\n\\item \\link{fixed<-.init} set the value of 'fixed' for an init\n\\item \\link{fixed<-.initList} set the values of 'fixed' for elements of an initList \n\\item \\link{fixedwidth.data.frame} convert a data.frame to fixed-width format\n\\item \\link{fixedwidth} convert to fixed-width format\n\\item \\link{fixFile} rewrite run name in control stream file specifications\n\\item \\link{fixProblem} rewrite run name in control stream PROBLEM statement\n\\item \\link{forbak} impute NAs using last observation carried forward and then next observation carried backward\n\\item \\link{format.comment} format comment \n\\item \\link{format.flag} format flag\n\\item \\link{format.init} format init\n\\item \\link{format.initList} format initList\n\\item \\link{format.legacy} pretty-print legacy information (conditioned objects)\n\\item \\link{format.mDate} format mDate\n\\item \\link{format.mDateTime} format mDateTime\n\\item \\link{format.mTime} format mTime\n\\item \\link{format.nmctl} format nmctl\n\\item \\link{ftable2data.frame} convert ftable to data.frame as displayed\n\\item \\link{getCovs} return non-commented non-duplicated rows of a NONMEM data set (internal)\n\\item \\link{getCwres} return the conditional weighted residuals pertinent to a given run (internal, expects cwtab1.deriv)\n\\item \\link{getdname} extract the path and file from the DATA block in the control stream associated with filename (internal)\n\\item \\link{getPars} return the non-duplicated (ID) rows corresponding to the specified filename (internal)\n\\item \\link{getTabs} return the observation rows (EVID==0) corresponding to the specified filename (internal)\n\\item \\link{glue} paste with no separator\n\\item \\link{groupnames} construct a single vector of group names from possibly multiple indices to the plotting data set (internal)\n\\item \\link{half.matrix} vectorize the lower triangular portion of a symmetric matrix\n\\item \\link{half} generic\n\\item \\link{hash} prepend a character to each line of output\n\\item \\link{hidden.data.frame} show commented rows of a data frame\n\\item \\link{hidden} generic\n\\item \\link{hide.data.frame} comment out the specified rows of a data frame, appending a flag that suggests the reason\n\\item \\link{hide} generic\n\\item \\link{ibw} calculate ideal body weight\n\\item \\link{ignored} check which rows of an input data set were ignored by NONMEM\n\\item \\link{ind.cwres} compute conditional weighted residuals (internal)\n\\item \\link{index.conditioned} index a conditioned object\n\\item \\link{index.digest} index a digest\n\\item \\link{index.isolated} index an isolated object\n\\item \\link{index.keyed} index a keyed data frame\n\\item \\link{index.nm} index an nm object\n\\item \\link{index} create an index plot\n\\item \\link{inner.data.frame} reduce columns to inner quantiles by imputing NA\n\\item \\link{inner} generic\n\\item \\link{is.alpha} test whether text is letters-only\n\\item \\link{is.cwres.readable.file} compute conditional weighted residuals (internal)\n\\item \\link{is.diagonal} test whether parameter label represents matrix diagonal element\n\\item \\link{is.fixed} detect thetas in parameter labels\n\\item \\link{is.iiv} detect omegas in parameter labels\n\\item \\link{is.latex.token} test whether text is valid latex command or environment\n\\item \\link{is.offdiagonal} test whether parameter label represents matrix offdiagonal element\n\\item \\link{is.one.nonalpha} test whether text is singular non-letter\n\\item \\link{is.random} detect omegas and sigmas in parameter labels\n\\item \\link{is.residual} detect sigmas in parameter labels\n\\item \\link{is.square.matrix} test whether a matrix is square\n\\item \\link{is.square} generic\n\\item \\link{isSubversioned} check if files are subversioned\n\\item \\link{isSubversionedFile} check if one file is subversioned\n\\item \\link{iterations} retrieve iteration statistics from NONMEM output file\n\\item \\link{justUnits} extract units from wikimath\n\\item \\link{ke} calculate elimination constant\n\\item \\link{key} return the key of a keyed data frame\n\\item \\link{key<-} assign a key\n\\item \\link{last} repeat, for each element, the last element where a condition is \\code{TRUE} (usually, within levels of an index)\n\\item \\link{latest} identify the latest of each set of variants\n\\item \\link{latex.args} format latex arguments\n\\item \\link{latex.options} format latex options\n\\item \\link{lbm} calculate lean body mass\n\\item \\link{left.keyed} produce left join of two keyed data frames\n\\item \\link{legacy} extract legacy from a conditioned object\n\\item \\link{legacy<-} assign legacy for a conditioned object\n\\item \\link{lhs} extract left-hand side of wikimath\n\\item \\link{locf} impute NA using last observation carried forward\n\\item \\link{lookup.one} translate among parameter attributes (scalar)\n\\item \\link{lookup} translate among parameter attributes (vector)\n\\item \\link{lower} calculate normal quantiles at lower probability of interval\n\\item \\link{ltable.data.frame} convert a data.frame to a latex table\n\\item \\link{ltable} convert to a latex table\n\\item \\link{lyse.data.frame} return the static and dynamic portions of a data frame\n\\item \\link{lyse.keyed} return the static and dynamic portions of a keyed data frame\n\\item \\link{lyse} generic\n\\item \\link{map} map one set of values to another\n\\item \\link{maxChar} return the number of printed characters for the widest element of x\n\\item \\link{merge.keyed} merge keyed data frames, preserving attributes\n\\item \\link{merge.nm} merge nm objects\n\\item \\link{metaMerge.character} recursively merge based on a vector of file names\n\\item \\link{metaMerge.default} merge two groomed objects\n\\item \\link{metaMerge.list} recursively merge elements of a list\n\\item \\link{metaMerge} generic \n\\item \\link{metaSub.character} systematically substitute elements in a character vector\n\\item \\link{metaSub.filename} systematically substitute elements in a text file\n\\item \\link{metaSub} generic\n\\item \\link{metrumrgURL} view a file in the metrumrg package\n\\item \\link{minus.keyed} drop rows in x that have matching rows in y\n\\item \\link{minus.moot} drop moot rows\n\\item \\link{moot.nm} identify moot rows (rows not influencing NONMEM estimates)\n\\item \\link{moot} generic\n\\item \\link{motif} alias for as.motif\n\\item \\link{msffile} extract msffile specification from a control stream\n\\item \\link{naInContext} display rows of data with missing values, as well as other rows with the same key\n\\item \\link{naKeys.default} detect rows for which one or more key fields is NA\n\\item \\link{naKeys.nm} default behavior, after stripping comments\n\\item \\link{naKeys} generic\n\\item \\link{name<-} change identified object names\n\\item \\link{nest} nest an XML fragment in a parent element\n\\item \\link{nix} identify Unix-like platforms (internal)\n\\item \\link{nm.pl} prepare command lines for nm.pl\n\\item \\link{nm} give a zero-row data frame with suitable columns and column classes; i.e. a template for NMTRAN data sets\n\\item \\link{nmPlots} a list of functions that plot nm objects\n\\item \\link{nmVersion} extract NONMEM version specification from configuration file\n\\item \\link{nocb} impute NA with next observation carried backward\n\\item \\link{NONR} run NONMEM and create diagnostic plots\n\\item \\link{NONR72} run NONMEM 7.2.0 or later\n\\item \\link{noPk.nm} rows where EVID is never 0 within SUBJ\n\\item \\link{noPk} generic\n\\item \\link{nospace} drop spaces from text\n\\item \\link{noUnits} drop units from wikimath\n\\item \\link{nth} repeat, for each element, the \\eqn{n^{th}}{n^th} element where a condition is \\code{TRUE}  (usually, within levels of an index)\n\\item \\link{nxt} calculate the next element for each element of x\n\\item \\link{offdiag.halfmatrix} select just the off-diagonal elements of a halfmatrix\n\\item \\link{offdiag} generic\n\\item \\link{omegacor} convert omega covariance in NONMEM output to correlation matrix\n\\item \\link{only} repeat, for each element, the only element where a condition is \\code{TRUE} (usually, within levels of an index)\n\\item \\link{Ops.keyed} use concise syntax to join data frames\n\\item \\link{ord.halfmatrix} compute the order of a half matrix\n\\item \\link{ord.matrix} compute the order of a symmetric matrix\n\\item \\link{ord} generic\n\\item \\link{packageCheck} load a package and run package-level examples\n\\item \\link{panel.bar} for each level, plot vertical (or horizontal) bars corresponding to x (y).\n\\item \\link{panel.covplot} plot distributions with respect to reference values; i.e. combine panel.cuts, panel.densitystrip, and panel.ref\n\\item \\link{panel.cuts} for each level, plot percent observations in each vertical category defined by cuts\n\\item \\link{panel.densitystrip} for each level, plot a filled polygon representing smoothed density of the distribution\n\\item \\link{panel.hist} for each level, plot a histogram\n\\item \\link{panel.ref} plot a reference region in a stripplot\n\\item \\link{panel.stratify} handle strips (levels) of data one at a time\n\\item \\link{parameter2wiki} convert parameter labels to wikmath\n\\item \\link{params} list documented model parameters\n\\item \\link{parens} wrap text in parentheses\n\\item \\link{parfile} extract parfile specification from a control stream\n\\item \\link{partab} construct a model parameter table\n\\item \\link{percent} convert to percent\n\\item \\link{plot.conditioned} plot a conditioned object\n\\item \\link{plot.digest} plot a digest\n\\item \\link{plot.isolated} plot isolated\n\\item \\link{plot.keyed} plot keyed\n\\item \\link{plot.nm} generate standard plots for an nm object using \\code{\\link{nmPlots}}\n\\item \\link{plotfilename} make a name for a diagnostic plot file\n\\item \\link{PLOTR} create diagnostic plots for NONMEM runs\n\\item \\link{plus.keyed} produce and outer join of keyed data frames\n\\item \\link{plus.rigged} merge an nm object with a rigged data frame\n\\item \\link{posmat} coerce a matrix to be positive definite\n\\item \\link{predoseDv.nm} DV is defined before the first record within SUBJ where EVID is 1\n\\item \\link{predoseDv} generic\n\\item \\link{prev} calculate the previous element for each element of x\n\\item \\link{print.comment} print comment\n\\item \\link{print.flag} print flag\n\\item \\link{print.halfmatrix} print halfmatrix\n\\item \\link{print.init} print init\n\\item \\link{print.initList} print initList\n\\item \\link{print.keyed.summary} print keyed summary\n\\item \\link{print.nm.summary} print nm summary\n\\item \\link{print.nmctl} print nmctl\n\\item \\link{print.temporal} print temporal\n\\item \\link{purge.dir} purge a directory (internal)\n\\item \\link{purge.files} purge files (internal)\n\\item \\link{qsub} prepare commandlines for qsub\n\\item \\link{raised.keyed} produce sequential left join of two keyed data frames\n\\item \\link{read.cwres.data} compute conditional weighted residuals (internal)\n\\item \\link{read.nm} read a csv file and try to transform to nm\n\\item \\link{read.nmctl} read a NONMEM control stream, converting to modifiable object\n\\item \\link{reapply} apply a function across cells of an indexed vector, giving an identically-indexed result\n\\item \\link{rep.comment} repeat comment\n\\item \\link{rep.flag} repeat flag\n\\item \\link{rep.temporal} repeat temporal\n\\item \\link{resample.csv.filename} create replicate data sets by stratified sampling with replacement, after reading csv file\n\\item \\link{resample.data.frame} create replicate data sets by stratified sampling with replacement\n\\item \\link{resample.filename} create replicate data sets by stratified sampling with replacement, after reading file\n\\item \\link{resample} generic\n\\item \\link{resolve} reinterpret relative file paths with respect to specified directory.\n\\item \\link{rhs} extract right-hand side of wikimath\n\\item \\link{rig.nm} generate extra rows, spaced across each subject's timecourse, for obtaining model predictions in NONMEM (EVID==2)\n\\item \\link{rig} generic\n\\item \\link{rinvchisq} generate inverse chi-square distribution\n\\item \\link{riwish} generate inverse Wishart distribution\n\\item \\link{rlog} generate a combined run log for multiple NONMEM runs\n\\item \\link{roles} alias for as.roles\n\\item \\link{row2tabular} convert a vector to a latex tabular row\n\\item \\link{runCommand} issue the system call that invokes NONMEM (internal)\n\\item \\link{runhead} determine whether each element is the start of a run\n\\item \\link{runlog} create a zero-row runlog\n\\item \\link{runNonmem} process a request for NONMEM invocation\n\\item \\link{runstate} determine the status of a run\n\\item \\link{safe.call} call a function, passing only those extra arguments that the function accepts\n\\item \\link{safeQuote} single-quote unquoted text that contains space\n\\item \\link{scavenge} find an expression in lines of text\n\\item \\link{seq.temporal} generate temporal sequence\n\\item \\link{setCwres} append conditional weighted residuals to an appropriate file\n\\item \\link{shuffle} move columns in a data frame\n\\item \\link{sigmacor} convert sigma covariance in NONMEM output to correlation matrix\n\\item \\link{simblock} generate deviates of the elements of a variance-covariance matrix\n\\item \\link{simpar} generate deviates of a set of model parameters for simulation\n\\item \\link{snap} coerce values to nearest of candidates\n\\item \\link{sort.keyed} sort a keyed data frame\n\\item \\link{spaces} create a string of spaces\n\\item \\link{splom.conditioned} scatterplot for conditioned\n\\item \\link{splom.digest} scatterplot for digest\n\\item \\link{splom.keyed} scatterplot for keyed\n\\item \\link{sqrtm} support \\code{compute.cwres}\n\\item \\link{stableMerge} produce a left join, with strict error checking\n\\item \\link{star} replace asterisk in x with y (internal)\n\\item \\link{static.data.frame} return the static portion of a data frame\n\\item \\link{static.keyed} return the static portion of a keyed data frame\n\\item \\link{static} generic\n\\item \\link{strain} reduce x to those elements that occur in options (internal)\n\\item \\link{summary.hidden.data.frame} summarize hidden rows of a data frame\n\\item \\link{summary.keyed} summarize a keyed data frame\n\\item \\link{summary.nm} summarize an nm object\n\\item \\link{superset} combine all NONMEM input with all output\n\\item \\link{svnIsText} check if subversioned files are text rather than binary\n\\item \\link{svnMarkAsNonText} tell Subversion to treat files as binary\n\\item \\link{svnMarkAsText} tell Subversion to treat files as text\n\\item \\link{svnMimeType} get the Subversion mime-type for files\n\\item \\link{svnPropGet} get a Subversion property for files\n\\item \\link{svnPropGetFile} get a Subversion property for one file\n\\item \\link{svnPropSet} set a subversion property on files\n\\item \\link{svnPropSetFile} set a Subversion property on a file\n\\item \\link{svnSetMimeType} set Subversion mime type on file\n\\item \\link{synthesis} sequentially left-join an arbitrary number of data frames, picking up novel columns (internal)\n\\item \\link{tabfile} extract tabfile specification from a control stream\n\\item \\link{tabular.data.frame} convert a data.frame to a latex tabular environment\n\\item \\link{tabular} convert to a latex tabular environment\n\\item \\link{tabularformat} generate a format string for a latex tabular environment\n\\item \\link{tagvalue} convert a list to a string of delimited tag-value pairs\n\\item \\link{tex2pdf} convert tex files to pdf\n\\item \\link{text2decimal} convert mixed text to decimal\n\\item \\link{titleCase} convert mixed case to title case, strictly by default\n\\item \\link{Tmax} calculate the time associated with the maximum concentration for each subject\n\\item \\link{tmax} calculate the time of the maximum concentration\n\\item \\link{Tmin} calculate the time associated with the minimum concentration for each subject\n\\item \\link{tos} extract thetas, omegas, and sigmas from wikimath\n\\item \\link{totitle} convert mixed case to title case, not strictly by default\n\\item \\link{transform.keyed} transform a keyed data frame, preserving class\n\\item \\link{uniKey.keyed} create a single character vector from all the key columns\n\\item \\link{uniKey} generic\n\\item \\link{unilog} create a zero-row unilog\n\\item \\link{unilogcor} convert omega or sigma covariance in NONMEM output to correlation matrix\n\\item \\link{unique.comment} find unique elements of a comment vector\n\\item \\link{unique.temporal} find unique elements of a temporal vector\n\\item \\link{unitDensity} calculate univariate density with maximum equal to 1\n\\item \\link{unitHist} calculate univariate histogram architecture with maximum height equal to 1\n\\item \\link{upper} calculate normal quantiles at upper probability of interval\n\\item \\link{variants} locate variants of a file in distinctive subdirectories\n\\item \\link{viewtex} view (as pdfs) files that contain fragmentary tex code (e.g. tables)\n\\item \\link{wiki2label} convert wikimath to a label, e.g. CL/F\n\\item \\link{wiki2latex} convert wikimath to latex\n\\item \\link{wiki2parameter} convert wikimath to a parameter, e.g. THETA1\n\\item \\link{wiki2plotmath} convert wikimath to plotmath\n\\item \\link{wikiparse} parse wikimath\n\\item \\link{wikitab} extract wikimath specification from a control stream\n\\item \\link{win} identify Windows platforms (internal)\n\\item \\link{wrap} wrap text in a latex environment\n\\item \\link{write.nm} write an nm object to file\n\\item \\link{write.nmctl} write an nmctl object to file\n\\item \\link{xtfrm.comment} produce a numeric vector that sorts in the same order as comment\n\\item \\link{xtfrm.flag} produce a numeric vector that sorts in the same order as flag\n\\item \\link{xtfrm.temporal} produce a numeric vector that sorts in the same order as temporal\n\\item \\link{xyplotExt} plot the parameter search history for a NONMEM7 run\n\\item \\link{zeroAmt.nm} AMT is zero where EVID is 1\n\\item \\link{zeroAmt} generic\n\\item \\link{zeroDv.nm} DV is zero where EVID is zero\n\\item \\link{zeroDv} generic\n%\\item \\link{rinvgamma} generate inverse gamma distribution given n, df, and sigma estimate\n} \n}\n\n",
    "created" : 1336085103932.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "hash" : "2042248653",
    "id" : "A809939E",
    "lastKnownWriteTime" : 1336085125,
    "path" : "~/project/metrumrg/man/helpList.Rd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_doc"
}